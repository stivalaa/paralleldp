#!/usr/bin/env python
###############################################################################
#
# readrnafold.py - functions to parse RNA folding information from the
#                  PostScript output files of the Vienna RNA package
#                  RNAfold program.
#
# File:    readrnafold.py
# Author:  Alex Stivala
# Created: March 2007
#
# $Id: readrnafold.py 51 2007-04-05 05:21:38Z astivala $
#
#
# This module contains functions to read the minimum free energy
# structure and base pair probability matrix from the output of the
# Vienna RNA package RNAfold program.
#
# See Hofacker et al 1994 "Fast Folding and Comparison of RNA Secondary
# Structures" Monatshefte fur Chemie 125:167-188
# and
# Hofacker 2003 "Vienna RNA secondary structure server" Nucleic Acids
# Research 31(13):3429-3431.
#
# Developed with Vienna RNA package version 1.6.3.
#
#
###############################################################################

import re

def read_RNAfold_dotplot(filename):
    """
    Read the the RNA base pairing probability matrix from the PostScript
    file generated by the Vienna RNA package RNAfold program with the -p
    option.

    Parameters:   filename of PostScript RNA dotplot file from
                  RNAfold -p to read.

    Return value: tuple (pairlist, seq)
                  where 

                  pairlist is the list of tuples (i, j, p)
                  where i,j are (zero-based) co-ordinates in the sequence
                  and p is the the base pair probabillity at i,j

                  and seq is the sequence string.

    """
    pairlist = []

    # TODO: try to check that the input file really is a _dp.ps file from
    # RNAfold instead of just getting errors below when it isn't

    # the regular expresion to find the sequence after the '/sequence { ('
    # directive ended with ') }'. Note we read the whole file into one
    # string with newlines and all, and re.search() the whole thing.
    # The sequence will be in group 1 of the re search result object
    # (the '(\S*)' in the regexp).
    seq_re = re.compile(r"/sequence\s*{\s*\(\\\s*(\S*)\s*[\\)]",
                        re.MULTILINE)

    dotplot_ps = open(filename).read() # read whole file (inefficient)
    sequence = seq_re.search(dotplot_ps).group(1).rstrip('\\')

    # The dp .ps file contains the square roots of the base pair
    # probabilities in the form i j sqrt(p(i,j)) ubox
    dpprob_re = re.compile(r"\d* \d* \d*[.]?\d* ubox")
    pairlist = []
    for line in dotplot_ps.splitlines(): # already read whole file
        if not dpprob_re.match(line):
            continue
        (i, j, sqrtp, ubox) = line.split()
        i = int(i) - 1  # 1-based in dp .ps file
        j = int(j) - 1
        sqrtp = float(sqrtp)
        pairlist.append((i, j, (sqrtp*sqrtp))) #stored as sqrt(p) in file

    return (pairlist, sequence)



def read_RNAfold_pairs(filename):
    """
    Read the the RNA base pair list from the PostScript secondary
    structure file generated by the Vienna RNA package
    RNAfold program option.

    Parameters:   filename of PostScript RNA secondary structure file from
                  RNAfold to read. (The _ss.ps file).

    Return value: tuple (pairlist, seq)
                  where 

                  pairlist is the list of tuples (i, j)
                  where i,j are (zero-based) co-ordinates in the sequence

                  and seq is the sequence string.

    """
    pairlist = []

    # TODO: try to check that the input file really is a _ss.ps file from
    # RNAfold instead of just getting errors below when it isn't
    
    # the regular expresion to find the sequence after the '/sequence ('
    # directive ended with ')'. Note we read the whole file into one
    # string with newlines and all, and re.search() the whole thing.
    # The sequence will be in group 1 of the re search result object
    # (the '(\S*)' in the regexp).
    # Note that there are no '{' and '}' characters here, unlike the dp
    # .ps file for some reason.
    seq_re = re.compile(r"/sequence\s*\(\\\s*(\S*)\s*[\\)]",
                        re.MULTILINE)

    structure_ps = open(filename).read() # read whole file (inefficient)
    sequence = seq_re.search(structure_ps).group(1).rstrip('\\')

    # The structure .ps file contains a list of pairs each in the form
    # [i j]
    pair_re = re.compile(r"\[\d* \d*\]")
    pairlist = []
    pairs_directive_re = re.compile(r"/pairs ")
    found_pairs_directive = False
    for line in structure_ps.splitlines(): # already read whole file

        if pairs_directive_re.match(line):
            found_pairs_directive = True

        if not found_pairs_directive:
            continue

        if not pair_re.match(line):
            continue

        (i, j) = line.lstrip('[').rstrip(']').split()

        i = int(i) - 1  # 1-based in structure .ps file
        j = int(j) - 1

        pairlist.append((i, j))

    return (pairlist, sequence)

